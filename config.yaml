read_pdf:
  var_reporting_year: 2023
  shareddrive_readpath: 'path'
  filepathout: 'path'
  model_data_filename: 'df_model_data.csv'
  parser_data_filename: 'dict_parser_data.json'
  parser_filepath_variables_filename: 'df_parser_filepath_variables.csv'
  completed_directory_dict_filename: 'dict_readpdf_completed_directory_files.json'

classify_pdf:
  model_objects_filepath: 'model/income/'
  vocab_freq_filename: 'income_vocab.txt'
  model_filename: 'income_model_mnb.sav'

parser_rules:
  num_rules:
    # <=999 (format: xxx)
    1: '([ ][(-]?\d{3}[)]?)'
    # <=999,999 & >999 (format: xxx/xx/x,xxx)
    2: '([ ][(-]?\d{1,3}[,]\d{3}[)]?)'
    # <=999,999 & >999 (format: sx xx,xxx)
    3: '([ ][(-]?\d{1}[ ]\d{2}[,]\d{3}[)]?)'
    # <=999,999,999 & >999,999 (format: xxx/xx/x,xxx,xxx)
    4: '([ ][(-]?\d{1,3}[,]\d{3}[,]\d{3}[)]?)'
    # >999,999,999 (format: xxx/xx/x,xxx,xxx,xxx)
    5: '([ ][(-]?\d{1,3}[,]\d{3}[,]\d{3}[,]\d{3}[)]?)'
    # x ,xxx - format
    6: '([ ][(-]?\d{1}[ ][,]\d{3})'
    # <99
    99: '([ ][(-]?\d{1,2}[)]?[ ])'
  num_exclude:
    # xxxx -- year
    count4: '([, ]?\d{4})'
    # numbers in label names
    alpha_nm: '([ ]?\d{1,3}[a-zA-Z])'
    # note
    note: '([''(''][a-zA-Z]{4}[ ]\d{1,2}['')''])'
  remove_strings:
    - '$'
    - '#'
  replace_blanks:
    - '-'
    - '─'
    - '—'
  date_pattern:
    format_monthname_date_year:
      months:
        - 'january|february|march|april|may|june|july|august|september|october|november|december'
        - 'jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec'
      dates:
        - '([ ]0[1-9][,]?[ ]|[ ][1-2][0-9][,]?[ ]|[ ]3[0-1][,]?[ ])'
        - '([ ]?0[1-9][,][ ]?|[ ]?[1-2][0-9][,][ ]?|[ ]?3[0-1][,][ ]?)'
      years:
        - '([ ][2][0-9]{3})'
    format_mm_dd_yyyy: '([0-1]?[0-9]/[0-3][0-9]/[2][0-9]{3})'
    format_yyyy_mm_dd: '([2][0-9]{3}-[0-1]?[0-9]-[0-3][0-9])'
    format_dd_mmm_yy: '([0-3][0-9]-(jan)?(feb)?(mar)?(apr)?(may)?(jun)?(jul)?(aug)?(sep)?(oct)?(nov)?(dec)?-[2][0-9])'
  thousand_pattern:
    patterns: '[(][$][0][0][0][s][)]'
    words: 'thousands'
  label_search:
  # {key:value} == {dataframe column name:regex to search}
  # if both found, safe to assume: latest period is unaudited
    unaudited: 'unaudited'
    audited: '[ ][(]?audited'
    annual: '[ ]year[s]? ended'
